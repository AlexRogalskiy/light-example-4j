
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  petstore

  Sample SAM Template for petstore

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        openapi: 3.0.1
        info:
          title:
            Ref: AWS::StackName
        components:
          securitySchemes:
            jwt-authorizer:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: custom
              x-amazon-apigateway-authorizer:
                identitySource: method.request.header.Authorization
                type: request
                authorizerUri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:964637446810:function:Authorizer/invocations
                authorizerResultTtlInSeconds: 0
        paths:
          
          /v1/pets:
            
            get:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PetsGetFunction.Arn}/invocations
              responses: {}
              security:
                - jwt-authorizer: []
            
            post:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PetsPostFunction.Arn}/invocations
              responses: {}
              security:
                - jwt-authorizer: []
            
          
          /v1/pets/{petId}:
            
            get:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PetsPetIdGetFunction.Arn}/invocations
              responses: {}
              security:
                - jwt-authorizer: []
            
            delete:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PetsPetIdDeleteFunction.Arn}/invocations
              responses: {}
              security:
                - jwt-authorizer: []
            
          
  
  PetsGetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      
      PackageType: Image
      
      Events:
        PetsGet:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /v1/pets
            Method: GET
            RestApiId:
              Ref: ApiGateway
    
    Metadata:
      DockerTag: java11-maven-v1
      DockerContext: ./PetsGetFunction
      Dockerfile: Dockerfile
    
  
  PetsPostFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      
      PackageType: Image
      
      Events:
        PetsPost:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /v1/pets
            Method: POST
            RestApiId:
              Ref: ApiGateway
    
    Metadata:
      DockerTag: java11-maven-v1
      DockerContext: ./PetsPostFunction
      Dockerfile: Dockerfile
    
  
  PetsPetIdGetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      
      PackageType: Image
      
      Events:
        PetsPetIdGet:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /v1/pets/{petId}
            Method: GET
            RestApiId:
              Ref: ApiGateway
    
    Metadata:
      DockerTag: java11-maven-v1
      DockerContext: ./PetsPetIdGetFunction
      Dockerfile: Dockerfile
    
  
  PetsPetIdDeleteFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      
      PackageType: Image
      
      Events:
        PetsPetIdDelete:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /v1/pets/{petId}
            Method: DELETE
            RestApiId:
              Ref: ApiGateway
    
    Metadata:
      DockerTag: java11-maven-v1
      DockerContext: ./PetsPetIdDeleteFunction
      Dockerfile: Dockerfile
    
  
  AuthorizerPerm:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: arn:aws:lambda:us-east-2:964637446810:function:Authorizer
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Sub': 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*'
